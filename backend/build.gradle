plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id "com.diffplug.spotless" version "6.25.0"
}

group = 'pl.agh.edu.wi.informatyka'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    compileOnly 'org.projectlombok:lombok'
//    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'com.auth0:java-jwt:4.4.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


    // mysql
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'

    implementation 'org.flywaydb:flyway-core:10.20.1'
    implementation 'org.flywaydb:flyway-mysql:10.20.1'

    testRuntimeOnly 'com.h2database:h2'
}

spotless {
    java {
        removeUnusedImports()
        palantirJavaFormat('2.47.0').formatJavadoc(true)
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}


tasks.named('test') {
    useJUnitPlatform()
}

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

tasks.register('newMigration') {
    doLast {
        def now = LocalDateTime.now()
        def formatter = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss")
        def timestamp = now.format(formatter)


        if (!project.hasProperty('m_name')) {
            throw new IllegalArgumentException("Please provide a migration name using -Pm_name=your_migration_name")
        }
        def migrationName = project.property('m_name')

        def migrationFilename = "V${timestamp}__${migrationName}.sql"

        def migrationFile = new File("./src/main/resources/db/migrations", migrationFilename)
        if (!migrationFile.exists()) {
            migrationFile.createNewFile()
            println "Created migration file: ${migrationFile.absolutePath}"
        } else {
            throw new GradleException("Migration file already exists: ${migrationFile.absolutePath}")
        }
    }
}